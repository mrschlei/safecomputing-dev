<?php


function dataguide_hooks_form_alter(&$form, &$form_state, $form_id) {
//mrschlei - 10.22.2012
//attaching the add_service_to_sens_data function (in this module - below) to the submit actions...
	if ($form_id == 'service_node_form') {
		$form["#submit"][] = "add_service_to_sens_data";	
	}  

//end form_alter
}



/**
 * Implements hook_node_insert().
 */
function dataguide_hooks_node_insert ($node) {

	if ($node->type == "service") {
		
		
		
		$title = $node->title;
		$service = $title;
		$nid = $node->nid;
		
		//this code is replicated elsewhere in this file... should probably be a function....
		$fieldname = strtolower($title);
		$fieldname = preg_replace("/[^a-zA-Z 0-9]+/", " ", $fieldname);
		$fieldname = str_replace(" ", "_", $fieldname);
		$fieldname = "prog_".$fieldname;
	
	
		if (strlen($fieldname) > 30) {
			$fieldname = substr($fieldname, 0, 29);
		}
		
		//write title, fieldname, and nid to db for later reference		
		db_insert('service_info')->fields(array('nid' => $nid,'fieldname' => $fieldname,'title' => $title))->execute();

		//email Mike....
		//ob_start();
		//var_dump($node);
		//$body = ob_get_clean();

		//$body = wordwrap($body,900, "\n");
		//mail("mrschlei@umich.edu","more field testing",$body);
		
		
				
		
	}	

}









/**
 * Implements hook_node_update().
 */
function cosign_auth_node_update ($node) {
	if ($node->type == "service") {
		$title = $node->title;
		$nid = $node->nid;
		$is_published = $node->status;


		//update the middle man DB with the new title, for consistency
		db_update('service_info')->fields(array('title' => $title))->condition('nid', $nid, '=')->execute();
		
		//update the field label with the new title
	$quickquery = db_query("SELECT * FROM {service_info} WHERE `nid` = :nid LIMIT 1", array(':nid' => $nid));			
	foreach ($quickquery as $record) {
		$fieldname = $record->fieldname;	
	}		
		
      $instance = field_read_instance("node", $fieldname, 'sensitive_data');
      
	  if ($instance) {
	  $instance['label'] = $title;
      field_update_instance($instance);		
	  }
	  else {
		watchdog('Following Node Update Log', "No fieldname! $fieldname : $nid", array(), WATCHDOG_DEBUG);  
	  }	
	
}//end if ($node->type == "service")
}//end function




/**
 * Implements hook_node_delete().
 */
function cosign_auth_node_delete ($node) {

	if ($node->type == "service") {
	//mail("mrschlei@umich.edu","pre-delete object",serialize($node));
	$nid = $node->nid;
	$quickquery = db_query("SELECT * FROM {service_info} WHERE `nid` = :nid LIMIT 1", array(':nid' => $nid));
	
		foreach ($quickquery as $record) {
			//mail("mrschlei@umich.edu","SQL query",serialize($record));
			$fieldname = $record->fieldname;
		}

		$myField_name = $fieldname;
		
		if (field_info_field($myField_name)) {
			//remove field from the Service Data content type:
			watchdog('Following Node Delete Log', "Found that field instance - deleting now.", array(), WATCHDOG_DEBUG);
			field_delete_field($myField_name);
		}	
		else {
			watchdog('Following Node Delete Log', "No field instance found.", array(), WATCHDOG_DEBUG);	
		}
		
		//delete {service_info} row for that node
		db_delete('service_info')->condition('nid', $nid)->execute();	
	}
}





//added by mrschlei 10/24/2012
//When Service form submit (see reference to this function above), look up all 'service' content types,
//get the titles, create fields for them, add them to a pre-defined group, and sort them.
//Fields are removed from the group on Service deletion - see cosign_auth_node_delete.
function add_service_to_sens_data($form, &$form_state) {

$service = $form['title']['#value'];

//I heard you like arrays, so I put arrays in your arrays are more arrayed:
$is_published = $form["additional_settings"]['group']["#groups"]["additional_settings"][2]["status"]["#value"];

//ob_start();
//var_dump($form);
//$body = ob_get_clean();

//$body = wordwrap($body,900, "\n");
//mail("mrschlei@umich.edu","some field data",$is_published);


	if ($is_published === 1) {
		create_a_field($service);
		reorder_services_group();
		watchdog('Add Service to Sens Data Log', $service." added.", array(), WATCHDOG_DEBUG);		
	}
}


//also not a hook - added to pull out the field creation logic
function create_a_field ($service) {

	//make the titles into proper field names
	//this code is duplicated above, so changes must be made in tandem - i should write a function for this, probably.
	$fieldname = strtolower($service);
	$fieldname = preg_replace("/[^a-zA-Z 0-9]+/", " ", $fieldname);
	$fieldname = str_replace(" ", "_", $fieldname);
	$fieldname = "prog_".$fieldname;
	if (strlen($fieldname) > 30) {
		$fieldname = substr($fieldname, 0, 29);
	}

    $myField_name = $fieldname;
    if(!field_info_field($myField_name)) // check if the field already exists.
    {
        $field = array(
            'field_name'    => $myField_name,
            'type'          => 'list_text',
			'weight'          => 10,
			'settings'	=> array(
     	 	'allowed_values' => array('Not Permitted' => 'Not Permitted', 'With Approval' => 'With Approval', 'Permitted' => 'Permitted'),
    ));
        field_create_field($field);

        $field_instance = array(
            'field_name'    => $myField_name,
			'label' => $service,
			'title' => $service,
            'entity_type'   => 'node',
			'default_value' => '',
            'bundle'        => 'sensitive_data',
            //'label'         => t('Select an image'),
            'description'   => t(''),
            'widget'        => array(
                'type'      => 'options_buttons',
                'weight'    => 10,
            ),
			'properties' => array( 
				'filter_xss' => 1,
				'strip_tags' => '',
				'empty_option' => '', 
				'optgroups' => ''
			), 			
			"value_key" => "value",
        );
        field_create_instance($field_instance);
		
		
		//add new fields to the Service Applicability Field Group
		$groups = field_group_read_groups(array(
			'name' => 'node',
			'bundle' => 'sensitive_data',
			'view_mode' => 'full'));
		
		if ($groups['node']['sensitive_data']['form']['group_data_service_applicability']) {
			$your_group = $groups['node']['sensitive_data']['form']['group_data_service_applicability'];
			$your_group->children[] = $myField_name;
			field_group_group_save($your_group);		
		}
		else {drupal_set_message("Group error!!");}
        //drupal_set_message("Fields created successfully!");
    }
}


function reorder_services_group() {
	
//sort the fields within the parent Field Group...
		$kids = array();
		$groups = field_group_read_groups(array(
			'name' => 'node',
			'bundle' => 'sensitive_data',
			'view_mode' => 'full'));
		
		if ($groups['node']['sensitive_data']['form']['group_data_service_applicability']) {
			//$kids = $groups['node']['sensitive_data']['form']['group_data_service_applicability']->children;
			foreach ($groups['node']['sensitive_data']['form']['group_data_service_applicability']->children as $kid) {
				array_push($kids, $kid);
				//echo $kid;
			}
			//sort the kids!
			sort($kids);
			$w = 0;
			foreach ($kids as $kid) {
				//assign the kids weights
				if ($instance = field_read_instance('node', $kid, 'sensitive_data')) {
					$instance['widget']['weight'] = $w;
					field_update_instance($instance);
					$w++;
			}}
			
		}
		
}